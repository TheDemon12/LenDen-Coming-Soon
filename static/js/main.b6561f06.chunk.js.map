{"version":3,"sources":["App.js","components/common/commonForm.jsx","serviceWorker.js","index.js"],"names":["App","state","data","error","success","loading","date","days","hours","minutes","seconds","schema","email","Joi","string","required","label","componentDidMount","myInterval","setInterval","timeLeft","moment","countdown","setState","doSubmit","a","ex","this","className","Image","src","process","style","maxWidth","width","marginBottom","marginTop","display","flexBasis","icon","faPaperPlane","color","fontSize","Form","margin","noValidate","onSubmit","handleSubmit","renderInput","renderAlert","renderSuccessAlert","renderLoader","Button","variant","type","backgroundColor","border","handleChange","input","currentTarget","name","value","validate","details","message","e","preventDefault","Alert","id","css","size","resetForm","placeholder","Group","controlId","Control","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b6561f06.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Image, Form, Button } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport 'moment-countdown';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\nimport CommonForm from './components/common/commonForm';\r\nimport Joi from 'joi-browser';\r\n\r\nclass App extends CommonForm {\r\n\tstate = {\r\n\t\tdata: {},\r\n\t\terror: '',\r\n\t\tsuccess: '',\r\n\t\tloading: false,\r\n\t\tdate: {\r\n\t\t\tdays: 0,\r\n\t\t\thours: 0,\r\n\t\t\tminutes: 0,\r\n\t\t\tseconds: 0,\r\n\t\t},\r\n\t};\r\n\r\n\tschema = {\r\n\t\temail: Joi.string().email().required().label('Email'),\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.myInterval = setInterval(() => {\r\n\t\t\tconst deadline = '2020-07-03';\r\n\r\n\t\t\tconst timeLeft = moment(deadline).countdown();\r\n\t\t\tthis.setState({\r\n\t\t\t\tdate: {\r\n\t\t\t\t\tdays: timeLeft.days,\r\n\t\t\t\t\thours: timeLeft.hours,\r\n\t\t\t\t\tminutes: timeLeft.minutes,\r\n\t\t\t\t\tseconds: timeLeft.seconds,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\tdoSubmit = async () => {\r\n\t\tconst { data } = this.state;\r\n\t\tthis.setState({ loading: true });\r\n\r\n\t\ttry {\r\n\t\t\t// await authService.login(data);\r\n\t\t\tconst success = 'Subscribed Successfully!';\r\n\t\t\tthis.setState({ loading: false, success });\r\n\t\t} catch (ex) {\r\n\t\t\tconst error = 'Something Failed';\r\n\t\t\tthis.setState({ error });\r\n\t\t\tthis.setState({ loading: false });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { days, minutes, hours, seconds } = this.state.date;\r\n\t\treturn (\r\n\t\t\t<div className='mainBox'>\r\n\t\t\t\t<div className='subBox'>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsrc={`${process.env.PUBLIC_URL}/demoLogo.png`}\r\n\t\t\t\t\t\tstyle={{ maxWidth: '260px', width: '40vw' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<h1 className='companyName'>Hola Amigos, </h1>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tclassName='comingSoon'\r\n\t\t\t\t\t\tstyle={{ marginBottom: '6vh', marginTop: '1vh' }}>\r\n\t\t\t\t\t\tWe hope you are well and safe during these tough times.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className='comingSoon'>\r\n\t\t\t\t\t\tThank you for visiting our website. We are coming soon to redefine\r\n\t\t\t\t\t\texchange. Brace yourselves.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className='comingSoon' style={{ marginTop: '0vh' }}>\r\n\t\t\t\t\t\tWe will soon be launching our social media handles.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='timerBox'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{days}</div>\r\n\t\t\t\t\t\t\t<div>Days</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{hours}</div>\r\n\t\t\t\t\t\t\t<div>Hours</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{minutes}</div>\r\n\t\t\t\t\t\t\t<div>Minutes</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{seconds}</div>\r\n\t\t\t\t\t\t\t<div>Seconds</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\ticon={faPaperPlane}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tcolor: '#fff',\r\n\t\t\t\t\t\t\tfontSize: '35px',\r\n\t\t\t\t\t\t\tmarginTop: '6vh',\r\n\t\t\t\t\t\t\tmarginBottom: '2vh',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<p className='newsletter'>Do not miss any update from us.</p>\r\n\t\t\t\t\t<p className='newsletter'>Subscribe to our newsletter</p>\r\n\t\t\t\t\t<Form\r\n\t\t\t\t\t\tstyle={{ maxWidth: 300, margin: 'auto' }}\r\n\t\t\t\t\t\tnoValidate\r\n\t\t\t\t\t\tonSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t{this.renderInput('email', 'Email Address')}\r\n\t\t\t\t\t\t{this.renderAlert()}\r\n\t\t\t\t\t\t{this.renderSuccessAlert()}\r\n\t\t\t\t\t\t{this.renderLoader()}\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tstyle={{ backgroundColor: '#ef5350', border: 'none' }}>\r\n\t\t\t\t\t\t\tSubscribe\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { Form, Alert } from 'react-bootstrap';\r\nimport BarLoader from 'react-spinners/BarLoader';\r\n\r\nclass CommonForm extends Component {\r\n\tstate = {\r\n\t\tdata: {},\r\n\t\terror: '',\r\n\t\tsuccess: '',\r\n\t};\r\n\thandleChange = ({ currentTarget: input }) => {\r\n\t\tconst data = { ...this.state.data };\r\n\t\tdata[input.name] = input.value;\r\n\r\n\t\tthis.setState({ data });\r\n\t};\r\n\r\n\tvalidate = () => {\r\n\t\tconst { error } = Joi.validate(this.state.data, this.schema);\r\n\t\tif (error) return error.details[0].message;\r\n\t\treturn '';\r\n\t};\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tsuccess: '',\r\n\t\t\terror: '',\r\n\t\t});\r\n\t\tconst error = this.validate();\r\n\t\tthis.setState({ error });\r\n\t\tif (error) return;\r\n\r\n\t\tthis.doSubmit();\r\n\t};\r\n\r\n\trenderInput(name, placeholder) {\r\n\t\tconst { data } = this.state;\r\n\t\treturn (\r\n\t\t\t<Form.Group controlId={name}>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t\tclassName='input'\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\ttype={name}\r\n\t\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\t\tvalue={data[name]}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</Form.Group>\r\n\t\t);\r\n\t}\r\n\trenderAlert = () => {\r\n\t\tconst { error } = this.state;\r\n\t\treturn (\r\n\t\t\terror && (\r\n\t\t\t\t<Alert id='error-alert' variant='danger'>\r\n\t\t\t\t\t{error}\r\n\t\t\t\t</Alert>\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\trenderSuccessAlert = () => {\r\n\t\tconst { success } = this.state;\r\n\t\treturn (\r\n\t\t\tsuccess && (\r\n\t\t\t\t<Alert id='error-success' variant='primary'>\r\n\t\t\t\t\t{success}\r\n\t\t\t\t</Alert>\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\trenderLoader = () => {\r\n\t\treturn (\r\n\t\t\t<BarLoader\r\n\t\t\t\tcss={{\r\n\t\t\t\t\tdisplay: 'block',\r\n\t\t\t\t\tmargin: '3vh auto 3vh auto',\r\n\t\t\t\t}}\r\n\t\t\t\tsize={50}\r\n\t\t\t\tcolor={'#ef5350'}\r\n\t\t\t\tloading={this.state.loading}\r\n\t\t\t/>\r\n\t\t);\r\n\t};\r\n\r\n\tresetForm = () => {\r\n\t\tconst data = {\r\n\t\t\temail: '',\r\n\t\t};\r\n\t\tthis.setState({ data });\r\n\t};\r\n}\r\n\r\nexport default CommonForm;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}