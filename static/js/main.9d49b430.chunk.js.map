{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","date","days","hours","minutes","seconds","componentDidMount","myInterval","setInterval","timeLeft","moment","countdown","setState","handleSubmit","e","preventDefault","console","log","this","className","Image","src","process","style","maxWidth","width","marginBottom","marginTop","display","flexBasis","icon","faPaperPlane","color","fontSize","Form","margin","noValidate","onSubmit","Group","controlId","Control","type","placeholder","Button","variant","backgroundColor","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iWAoHeA,G,kNA3GdC,MAAQ,CACPC,KAAM,CACLC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,I,EAIXC,kBAAoB,WACnB,EAAKC,WAAaC,aAAY,WAC7B,IAEMC,EAAWC,IAFA,cAEiBC,YAClC,EAAKC,SAAS,CACbX,KAAM,CACLC,KAAMO,EAASP,KACfC,MAAOM,EAASN,MAChBC,QAASK,EAASL,QAClBC,QAASI,EAASJ,aAGlB,M,EAGJQ,aAAe,SAACC,GACfA,EAAEC,iBACFC,QAAQC,IAAI,c,uDAGH,IAAD,EACkCC,KAAKlB,MAAMC,KAA7CC,EADA,EACAA,KAAME,EADN,EACMA,QAASD,EADf,EACeA,MAAOE,EADtB,EACsBA,QAC9B,OACC,yBAAKc,UAAU,WACd,yBAAKA,UAAU,UACd,kBAACC,EAAA,EAAD,CACCC,IAAG,UAAKC,sBAAL,iBACHC,MAAO,CAAEC,SAAU,QAASC,MAAO,UAEpC,wBAAIN,UAAU,eAAd,iBACA,uBACCA,UAAU,aACVI,MAAO,CAAEG,aAAc,MAAOC,UAAW,QAF1C,2DAKA,uBAAGR,UAAU,cAAb,kGAIA,uBAAGA,UAAU,aAAaI,MAAO,CAAEI,UAAW,QAA9C,uDAGA,yBACCR,UAAU,WACVI,MAAO,CACNK,QAAS,SAEV,yBAAKT,UAAU,eAAeI,MAAO,CAAEM,UAAW,QACjD,6BAAM3B,GACN,sCAED,yBAAKiB,UAAU,eAAeI,MAAO,CAAEM,UAAW,QACjD,6BAAM1B,GACN,uCAED,yBAAKgB,UAAU,eAAeI,MAAO,CAAEM,UAAW,QACjD,6BAAMzB,GACN,yCAED,yBAAKe,UAAU,eAAeI,MAAO,CAAEM,UAAW,QACjD,6BAAMxB,GACN,2CAIH,6BACC,kBAAC,IAAD,CACCyB,KAAMC,IACNR,MAAO,CACNS,MAAO,OACPC,SAAU,OACVN,UAAW,MACXD,aAAc,SAGhB,uBAAGP,UAAU,cAAb,mCACA,uBAAGA,UAAU,cAAb,+BACA,kBAACe,EAAA,EAAD,CACCX,MAAO,CAAEC,SAAU,IAAKW,OAAQ,QAChCC,YAAU,EACVC,SAAUnB,KAAKL,cACf,kBAACqB,EAAA,EAAKI,MAAN,CAAYC,UAAU,kBACrB,kBAACL,EAAA,EAAKM,QAAN,CAAcC,KAAK,QAAQC,YAAY,mBAExC,kBAACC,EAAA,EAAD,CACCC,QAAQ,UACRH,KAAK,SACLlB,MAAO,CAAEsB,gBAAiB,UAAWC,OAAQ,SAH9C,oB,GA/FYC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9d49b430.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Image, Form, Button } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport 'moment-countdown';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tdate: {\r\n\t\t\tdays: 0,\r\n\t\t\thours: 0,\r\n\t\t\tminutes: 0,\r\n\t\t\tseconds: 0,\r\n\t\t},\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.myInterval = setInterval(() => {\r\n\t\t\tconst deadline = '2020-07-03';\r\n\r\n\t\t\tconst timeLeft = moment(deadline).countdown();\r\n\t\t\tthis.setState({\r\n\t\t\t\tdate: {\r\n\t\t\t\t\tdays: timeLeft.days,\r\n\t\t\t\t\thours: timeLeft.hours,\r\n\t\t\t\t\tminutes: timeLeft.minutes,\r\n\t\t\t\t\tseconds: timeLeft.seconds,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.log('submitted');\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { days, minutes, hours, seconds } = this.state.date;\r\n\t\treturn (\r\n\t\t\t<div className='mainBox'>\r\n\t\t\t\t<div className='subBox'>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsrc={`${process.env.PUBLIC_URL}/demoLogo.png`}\r\n\t\t\t\t\t\tstyle={{ maxWidth: '300px', width: '50vw' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<h1 className='companyName'>Hola Amigos, </h1>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tclassName='comingSoon'\r\n\t\t\t\t\t\tstyle={{ marginBottom: '6vh', marginTop: '1vh' }}>\r\n\t\t\t\t\t\tWe hope you are well and safe during these tough times.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className='comingSoon'>\r\n\t\t\t\t\t\tThank you for visiting our website. We are coming soon to redefine\r\n\t\t\t\t\t\texchange. Brace yourselves.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className='comingSoon' style={{ marginTop: '0vh' }}>\r\n\t\t\t\t\t\tWe will soon be launching our social media handles.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='timerBox'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{days}</div>\r\n\t\t\t\t\t\t\t<div>Days</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{hours}</div>\r\n\t\t\t\t\t\t\t<div>Hours</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{minutes}</div>\r\n\t\t\t\t\t\t\t<div>Minutes</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='timerElement' style={{ flexBasis: '25%' }}>\r\n\t\t\t\t\t\t\t<div>{seconds}</div>\r\n\t\t\t\t\t\t\t<div>Seconds</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\ticon={faPaperPlane}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tcolor: '#fff',\r\n\t\t\t\t\t\t\tfontSize: '35px',\r\n\t\t\t\t\t\t\tmarginTop: '6vh',\r\n\t\t\t\t\t\t\tmarginBottom: '2vh',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<p className='newsletter'>Do not miss any update from us.</p>\r\n\t\t\t\t\t<p className='newsletter'>Subscribe to our newsletter</p>\r\n\t\t\t\t\t<Form\r\n\t\t\t\t\t\tstyle={{ maxWidth: 300, margin: 'auto' }}\r\n\t\t\t\t\t\tnoValidate\r\n\t\t\t\t\t\tonSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t<Form.Group controlId='formBasicEmail'>\r\n\t\t\t\t\t\t\t<Form.Control type='email' placeholder='Email Address' />\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tstyle={{ backgroundColor: '#ef5350', border: 'none' }}>\r\n\t\t\t\t\t\t\tSubscribe\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}